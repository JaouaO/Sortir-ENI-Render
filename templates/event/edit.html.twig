{% extends 'base.html.twig' %}

{% block title %}Sortie{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <link rel="stylesheet" href="{{ asset('build/app.css') }}">
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
{% endblock %}

{% block body %}
    <div class="registration-container">
        <div class="registration-card">
            {% if mode == 'create' %}
                <h1 class="text-center mb-4">Créer une nouvelle sortie</h1>
            {% else %}
                <h1 class="text-center mb-4">Mettre à jour la sortie</h1>
            {% endif %}

            {{ form_start(event_form, { 'attr': { 'class': 'needs-validation' } }) }}
            {{ form_row(event_form.name) }}
            {{ form_row(event_form.startDateTime) }}
            {{ form_row(event_form.endDateTime) }}
            {{ form_row(event_form.registrationDeadline) }}
            {{ form_row(event_form.maxParticipants) }}
            {{ form_row(event_form.eventInfo) }}
            {{ form_row(event_form.site) }}
            {{ form_row(event_form.place) }}

            <div id="newPlaceStreetWrapper" style="display:none;" class="mb-3">
                <h5>Ajouter un nouveau lieu</h5>
                {{ form_row(event_form.newPlace) }}
                {{ form_row(event_form.newPlaceCity) }}
                {{ form_row(event_form.newPlaceStreet) }}
            </div>

            {{ form_row(event_form.newPlaceLat) }}
            {{ form_row(event_form.newPlaceLng) }}

            <div class="text-danger mb-3">
                {{ form_errors(event_form.newPlaceLat) }}
            </div>

            <div id="map" style="height:400px; margin-bottom:20px;"></div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary">
                    {{ mode == 'create' ? 'Créer' : 'Mettre à jour' }}
                </button>
            </div>
            {{ form_end(event_form) }}
        </div>
    </div>

    <script>
        (function() {
            let map = null;
            let marker = null;
            let initialized = false;

            function initLeaflet() {
                if (initialized) return;
                const mapEl = document.getElementById('map');
                if (!mapEl || typeof L === 'undefined') return;

                const placeSelect = document.querySelector('#{{ event_form.place.vars.id }}');
                const streetWrapper = document.querySelector('#newPlaceStreetWrapper');

                function toggleStreetField() {
                    if (placeSelect && placeSelect.value) streetWrapper.style.display = 'none';
                    else streetWrapper.style.display = 'block';
                }

                if (placeSelect && streetWrapper) {
                    toggleStreetField();
                    placeSelect.addEventListener('change', toggleStreetField);
                }

                map = L.map('map').setView([47.2184, 1.6536], 6);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; OpenStreetMap contributors'
                }).addTo(map);

                function setMarker(lat, lng) {
                    if (marker) map.removeLayer(marker);
                    marker = L.marker([lat, lng]).addTo(map);
                    map.setView([lat, lng], 15);
                }

                if (placeSelect && placeSelect.value) {
                    const selectedOption = placeSelect.selectedOptions[0];
                    const lat = selectedOption.dataset.lat;
                    const lng = selectedOption.dataset.lng;
                    if (lat && lng) setMarker(lat, lng);
                }

                placeSelect?.addEventListener('change', () => {
                    const selectedOption = placeSelect.selectedOptions[0];
                    const lat = selectedOption.dataset.lat;
                    const lng = selectedOption.dataset.lng;

                    if (lat && lng) setMarker(lat, lng);
                    else if (marker) {
                        map.removeLayer(marker);
                        marker = null;
                        map.setView([46.603354, 1.888334], 6);
                    }
                    toggleStreetField();
                });

                map.on('click', function(e) {
                    if (placeSelect && placeSelect.value) return;
                    if (marker) map.removeLayer(marker);
                    marker = L.marker(e.latlng).addTo(map);

                    const latInput = document.querySelector('#{{ event_form.newPlaceLat.vars.id }}');
                    const lngInput = document.querySelector('#{{ event_form.newPlaceLng.vars.id }}');
                    if (latInput && lngInput) {
                        latInput.value = e.latlng.lat;
                        lngInput.value = e.latlng.lng;
                    }
                });

                initialized = true;
            }

            initLeaflet();
            const intervalId = setInterval(() => { if (!initialized) initLeaflet(); else clearInterval(intervalId); }, 300);
            document.addEventListener('DOMContentLoaded', initLeaflet);
        })();
    </script>
{% endblock %}
