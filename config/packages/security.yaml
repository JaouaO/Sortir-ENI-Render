security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 86400 # 1 day in seconds
            form_login:
                login_path: user_login
                check_path: user_login
                enable_csrf: true
            logout:
                path: user_logout
                # where to redirect after logout
                # target: app_any_route
            user_checker: App\Security\UserActiveChecker


    role_hierarchy:
        ROLE_ADMINISTRATEUR: [ ROLE_ORGANISATEUR, ROLE_USER ]
        ROLE_ORGANISATEUR: [ ROLE_USER ]
        ROLE_USER: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      # --- Routes Admin (seulement ROLE_ADMIN)
      - { path: ^/administration, roles: ROLE_ADMIN }

      # --- Routes de gestion des événements (créateurs et admins)
      - { path: ^/sortie/creer, roles: ROLE_ORGANISATEUR }
      - { path: ^/sortie/\d+/modifier, roles: ROLE_ORGANISATEUR }
      - { path: ^/sortie/\d+/annuler, roles: ROLE_ORGANISATEUR }


      # --- Routes publiques
      - { path: ^/utilisateur/profile, roles: ROLE_USER }
      - { path: ^/utilisateur/connexion, roles: IS_AUTHENTICATED_ANONYMOUSLY }
      - { path: ^/utilisateur/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
      - { path: ^/reset-password, roles: IS_AUTHENTICATED_ANONYMOUSLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
